<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>👨🏻‍💻 技术 on 果汁天下苏&#39;s Blog</title>
    <link>http://guozhi1.github.io/posts/tech/</link>
    <description>Recent content in 👨🏻‍💻 技术 on 果汁天下苏&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 29 Jun 2023 15:25:38 +0800</lastBuildDate><atom:link href="http://guozhi1.github.io/posts/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>键盘HOOK学习以及逆向</title>
      <link>http://guozhi1.github.io/posts/tech/hook%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E9%80%86%E5%90%91/</link>
      <pubDate>Thu, 29 Jun 2023 15:25:38 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/hook%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E9%80%86%E5%90%91/</guid>
      <description>一、WidnowsHOOK分类 系统钩子（System Hooks）：系统钩子是最常见的一类钩子，用于监视和修改系统级别的事件。系统钩子可以捕获和处理各种系统事件，如键盘输入、鼠标消息、窗口消息等。系统钩子可以全局范围内生效，可以对整个系统中的事件进行拦截和处理。 应用程序钩子（App</description>
    </item>
    
    <item>
      <title>Src未授权访问挖掘</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%8C%96%E6%8E%98/</link>
      <pubDate>Fri, 02 Jun 2023 17:48:15 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%8C%96%E6%8E%98/</guid>
      <description>可以正常使用的功能点截取数据包，删除cookie看对业务是否能正常处理，如果处理就是未授权。 可以f12查看前端页面是否存在未授权的API接口 修改返回包</description>
    </item>
    
    <item>
      <title>Oasys代码审计</title>
      <link>http://guozhi1.github.io/posts/tech/oasys%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</link>
      <pubDate>Mon, 22 May 2023 15:54:16 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/oasys%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</guid>
      <description>OAsys代码审计 知识来源 1. sql注入 全局搜索可以注入的地方${可以找到sql注入的地方。#{}是预编译不可以进行注入的。 做了一个简单的判断然后进行拼接操作。 这个语句的id是sortMyNotice（我没截进去） 然后在这个所属的类 在cn.gson.oasys.mappers这个包</description>
    </item>
    
    <item>
      <title>Java代码审计smbms</title>
      <link>http://guozhi1.github.io/posts/tech/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1smbms/</link>
      <pubDate>Sun, 14 May 2023 16:56:09 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1smbms/</guid>
      <description>SMBMS代码审计 1. xss漏洞 先知社区-知识来源 这个xss在head.jsp文件的标签里，获取了请求头的Referer参数在前端显示了 可以使用payload进行闭合操作，进行闭合操作 &amp;#34;&amp;gt;&amp;lt;img src=x onerror=alert(1)&amp;gt; 这个payload在应该经过过滤器的时候就被拦截，因为jsp的本质是servlet所以是经过</description>
    </item>
    
    <item>
      <title>Src挖掘 Xss漏洞</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-xss%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Tue, 09 May 2023 08:35:41 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-xss%E6%BC%8F%E6%B4%9E/</guid>
      <description>src挖掘-xss漏洞 漏洞点：url跳转参数，登录url跳转， 退出 注意点：注意url参数 redirect URL redirect_url等参数 前端302跳转可造成xss漏洞window.location 正常的url:https://guozhi1.github.io/login?url=http:/</description>
    </item>
    
    <item>
      <title>Src挖掘 短信邮箱轰炸</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-%E7%9F%AD%E4%BF%A1%E9%82%AE%E7%AE%B1%E8%BD%B0%E7%82%B8/</link>
      <pubDate>Tue, 09 May 2023 08:14:15 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-%E7%9F%AD%E4%BF%A1%E9%82%AE%E7%AE%B1%E8%BD%B0%E7%82%B8/</guid>
      <description>src挖掘-短信邮箱轰炸 漏洞点：有手机号， 邮箱发送东西的地方 有的轰炸只有前端限制，可以通过burp抓包进行重发测试 有些会有后端的时间限制如后端10秒，前端60秒，我们只需要关注后端10秒时间一到立马发包 并发轰炸在一定时间内，发送数据包可以被服务器受理，只要在这个时间内多次发包就可</description>
    </item>
    
    <item>
      <title>Src挖掘 Pdf导出导致的ssrf漏洞</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-pdf%E5%AF%BC%E5%87%BA%E5%AF%BC%E8%87%B4%E7%9A%84ssrf%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Tue, 09 May 2023 07:33:40 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-pdf%E5%AF%BC%E5%87%BA%E5%AF%BC%E8%87%B4%E7%9A%84ssrf%E6%BC%8F%E6%B4%9E/</guid>
      <description>src挖掘-pdf导出导致的ssrf 漏洞点：pdf导出 在测试pdf导出导致的ssrf有两个方法 burp抓包进行插入标签 通过js断点调试控制台使用插入 变量=变量.replaceAll(&amp;#34;被替换的值&amp;#34;， &amp;#34;&amp;lt;iframe src=&amp;#34;http://dnslog&amp;#34;&amp;gt;&amp;#34;); 如果是全回显就会返回对应的网址，不是全回显需要注意网页延迟或者</description>
    </item>
    
    <item>
      <title>32位逆向技术</title>
      <link>http://guozhi1.github.io/posts/tech/32%E4%BD%8D%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 15 Apr 2023 15:02:44 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/32%E4%BD%8D%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/</guid>
      <description>前言 知识来源：《加密与解密》 第一章启动函数 Windows程序在按顺序执行时不是直接从WinMain函数开始的,而是执行别的函数进行初始化,之后调用WinMain函数 （选择WinMain,交叉引用就可以找到上一级） 第二章函数 1. 识别函数 编译器都会使用call与ret指令来进行函数的调</description>
    </item>
    
    <item>
      <title>逆向基础-调用约定</title>
      <link>http://guozhi1.github.io/posts/tech/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 11 Apr 2023 12:08:52 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/</guid>
      <description>调用约定 知识来源 允许使用VARARG：表示参数个数可以是不确定 约定类型 _cdecl(C类规范) pascal stdcall Fastcall 参数传递 从右到左 从左到右 从右到左 寄存器传参与栈 平衡者 调用者 子程序 子程序 子程序 允许使用VARARG 是 否 否 x86 下的调用约定 _cdecl,_stdcall,_fastcall int Test(int a,int b,int c,int d,int e) { return a + b + c + d + e; } int main() { Test(1,2,3,4,5); } _cdecl C++下的默</description>
    </item>
    
    <item>
      <title>文本类型免杀</title>
      <link>http://guozhi1.github.io/posts/tech/%E6%96%87%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%85%8D%E6%9D%80/</link>
      <pubDate>Tue, 11 Apr 2023 10:41:37 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E6%96%87%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%85%8D%E6%9D%80/</guid>
      <description>AMSI 一个反病毒接口，分析恶意代码。 位置是在C:\windows\system32\amsi.dll 安全厂商也可以通过接入Amsi进行查杀提高安全性 接入Amsi的相关厂商 AMSI的处理流程是：扫描&amp;mdash;-触发&amp;mdash;-病毒库 ASMI绕过方式 不进行绕过，的显示 PS C:\Users\32569&amp;gt; amsiutils 所在位</description>
    </item>
    
  </channel>
</rss>
