<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>👨🏻‍💻 技术 on 果汁天下苏&#39;s Blog</title>
    <link>http://guozhi1.github.io/posts/tech/</link>
    <description>Recent content in 👨🏻‍💻 技术 on 果汁天下苏&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 Oct 2023 09:38:50 +0800</lastBuildDate><atom:link href="http://guozhi1.github.io/posts/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proxy代理编写</title>
      <link>http://guozhi1.github.io/posts/tech/proxy%E4%BB%A3%E7%90%86%E7%BC%96%E5%86%99/</link>
      <pubDate>Mon, 30 Oct 2023 09:38:50 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/proxy%E4%BB%A3%E7%90%86%E7%BC%96%E5%86%99/</guid>
      <description>proxy从互联网收集代理的编写 借鉴的代码SmallProxyPool 一、代码的结构 我在分析SmallProxyPool代码之后找到了几个基础的结构用这些基础的结构就可以编写一个手机互联网代理的工具 收集模块 通过Fofa搜索到互联网上的Sockt5资产 检测模块 通过检测看什么Sock</description>
    </item>
    
    <item>
      <title>补丁技术</title>
      <link>http://guozhi1.github.io/posts/tech/%E8%A1%A5%E4%B8%81%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 21 Oct 2023 13:03:13 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E8%A1%A5%E4%B8%81%E6%8A%80%E6%9C%AF/</guid>
      <description>补丁技术 逆向工程中，经常需改更改程序的原有执行流程，使其增加或减少一些功能代码。这就需要给原有的文件添加补丁。 补丁分为两种文件补丁和内存补丁，文件补丁修改文件本身的某个数据，内存补丁是在内存中修改数据。 1.文件补丁 文件补丁直接对二进制可执行文件进行修改使其满足需求。文件补丁实现很</description>
    </item>
    
    <item>
      <title>Jwt漏洞学习</title>
      <link>http://guozhi1.github.io/posts/tech/jwt%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Oct 2023 10:43:05 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/jwt%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</guid>
      <description>知识文献 1.JWT介绍 jwt是一种用于身份验证和授权的开放标准,通过网络应用间的传递加密的json。jwt的攻击途径有例如：特权升级、信息泄露、sqli , xss, ssrf,rce, LFI等。 2.基础概念 JWS: singed jwt 签名过的jwt JWK: JWT的密钥，常说的的SECRET JWE: encrypted JWT的部分payload经过加密的JW</description>
    </item>
    
    <item>
      <title>二次开发</title>
      <link>http://guozhi1.github.io/posts/tech/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 12 Oct 2023 14:29:40 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</guid>
      <description>1.数据对齐 数据对齐cpu的结构一部分, 对齐可以提升执行效率，当数据大小的数据模数的内存地址是0的时候，数据是对齐的。例如 word值总是能被2除尽的地方开始，而dword值总是被4除尽的地方开始， x86可以对未对其的数据进行调整，但是代价是cpu的资源。 在windows中</description>
    </item>
    
    <item>
      <title>Hook技术</title>
      <link>http://guozhi1.github.io/posts/tech/hook%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 11 Oct 2023 17:02:48 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/hook%E6%8A%80%E6%9C%AF/</guid>
      <description>1. Hook技术 hook的手段就是“钩住”关心的程序流并 并根据需要进行干预的动作 1.1 IAT HOOK篡改MessageBox消息</description>
    </item>
    
    <item>
      <title>DLL劫持技术</title>
      <link>http://guozhi1.github.io/posts/tech/dll%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 11 Sep 2023 14:46:30 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/dll%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF/</guid>
      <description>DLL劫持技术 1、介绍 DLL劫持技术是一种权限维持的手段， 通过劫持正常程序DLL的执行流让程序执行恶意代码。 流程 正常程序 &amp;mdash;-调用&amp;mdash;-&amp;raquo; 正常的DLL &amp;mdash;-执行&amp;mdash;&amp;raquo; 正常功能 DLL劫持就可以通过劫持正常的DLL, 让恶</description>
    </item>
    
    <item>
      <title>Src未授权访问挖掘</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%8C%96%E6%8E%98/</link>
      <pubDate>Fri, 02 Jun 2023 17:48:15 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%8C%96%E6%8E%98/</guid>
      <description>可以正常使用的功能点截取数据包，删除cookie看对业务是否能正常处理，如果处理就是未授权。 可以f12查看前端页面是否存在未授权的API接口 修改返回包</description>
    </item>
    
    <item>
      <title>Src挖掘 Xss漏洞</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-xss%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Tue, 09 May 2023 08:35:41 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-xss%E6%BC%8F%E6%B4%9E/</guid>
      <description>src挖掘-xss漏洞 漏洞点：url跳转参数，登录url跳转， 退出 注意点：注意url参数 redirect URL redirect_url等参数 前端302跳转可造成xss漏洞window.location 正常的url:https://guozhi1.github.io/login?url=http:/</description>
    </item>
    
    <item>
      <title>Src挖掘 短信邮箱轰炸</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-%E7%9F%AD%E4%BF%A1%E9%82%AE%E7%AE%B1%E8%BD%B0%E7%82%B8/</link>
      <pubDate>Tue, 09 May 2023 08:14:15 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-%E7%9F%AD%E4%BF%A1%E9%82%AE%E7%AE%B1%E8%BD%B0%E7%82%B8/</guid>
      <description>src挖掘-短信邮箱轰炸 漏洞点：有手机号， 邮箱发送东西的地方 有的轰炸只有前端限制，可以通过burp抓包进行重发测试 有些会有后端的时间限制如后端10秒，前端60秒，我们只需要关注后端10秒时间一到立马发包 并发轰炸在一定时间内，发送数据包可以被服务器受理，只要在这个时间内多次发包就可</description>
    </item>
    
    <item>
      <title>Src挖掘 Pdf导出导致的ssrf漏洞</title>
      <link>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-pdf%E5%AF%BC%E5%87%BA%E5%AF%BC%E8%87%B4%E7%9A%84ssrf%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Tue, 09 May 2023 07:33:40 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/src%E6%8C%96%E6%8E%98-pdf%E5%AF%BC%E5%87%BA%E5%AF%BC%E8%87%B4%E7%9A%84ssrf%E6%BC%8F%E6%B4%9E/</guid>
      <description>src挖掘-pdf导出导致的ssrf 漏洞点：pdf导出 在测试pdf导出导致的ssrf有两个方法 burp抓包进行插入标签 通过js断点调试控制台使用插入 变量=变量.replaceAll(&amp;#34;被替换的值&amp;#34;， &amp;#34;&amp;lt;iframe src=&amp;#34;http://dnslog&amp;#34;&amp;gt;&amp;#34;); 如果是全回显就会返回对应的网址，不是全回显需要注意网页延迟或者</description>
    </item>
    
    <item>
      <title>文本类型免杀</title>
      <link>http://guozhi1.github.io/posts/tech/%E6%96%87%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%85%8D%E6%9D%80/</link>
      <pubDate>Tue, 11 Apr 2023 10:41:37 +0800</pubDate>
      
      <guid>http://guozhi1.github.io/posts/tech/%E6%96%87%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%85%8D%E6%9D%80/</guid>
      <description>AMSI 一个反病毒接口，分析恶意代码。 位置是在C:\windows\system32\amsi.dll 安全厂商也可以通过接入Amsi进行查杀提高安全性 接入Amsi的相关厂商 AMSI的处理流程是：扫描&amp;mdash;-触发&amp;mdash;-病毒库 ASMI绕过方式 不进行绕过，的显示 PS C:\Users\32569&amp;gt; amsiutils 所在位</description>
    </item>
    
  </channel>
</rss>
